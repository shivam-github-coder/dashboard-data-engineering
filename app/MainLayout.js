"use client";
import "./globals.css";
import { Inter } from "next/font/google";
import { Providers } from "./redux/provider";
import { Auth0Provider, useAuth0 } from "@auth0/auth0-react";
import * as React from "react";
import { styled, useTheme } from "@mui/material/styles";
import Box from "@mui/material/Box";
import MuiDrawer from "@mui/material/Drawer";
import MuiAppBar from "@mui/material/AppBar";
import List from "@mui/material/List";
import CssBaseline from "@mui/material/CssBaseline";
import Divider from "@mui/material/Divider";
import IconButton from "@mui/material/IconButton";
import ListItem from "@mui/material/ListItem";
import ListItemButton from "@mui/material/ListItemButton";
import ListItemIcon from "@mui/material/ListItemIcon";
import ListItemText from "@mui/material/ListItemText";
import InboxIcon from "@mui/icons-material/MoveToInbox";
import MailIcon from "@mui/icons-material/Mail";
import Image from "next/image";
import DET from "../public/data-engineering-website-favicon-color.png";
import DETFull from "../public/data-engineering-high-resolution-logo-color-on-transparent-background.png";
import LogoutIcon from "@mui/icons-material/Logout";
import { Avatar } from "@mui/material";
import { usePathname, useRouter } from "next/navigation";
import InventoryIcon from "@mui/icons-material/Inventory";
import CalendarMonthIcon from "@mui/icons-material/CalendarMonth";
import BentoIcon from "@mui/icons-material/Bento";
import CableIcon from "@mui/icons-material/Cable";
import ChatIcon from "@mui/icons-material/Chat";
import AspectRatioIcon from "@mui/icons-material/AspectRatio";
import ShoppingCartIcon from '@mui/icons-material/ShoppingCart';

const drawerWidth = 240;

const openedMixin = (theme) => ({
  width: drawerWidth,
  transition: theme.transitions.create("width", {
    easing: theme.transitions.easing.sharp,
    duration: theme.transitions.duration.enteringScreen,
  }),
  overflowX: "hidden",
  backgroundColor: "rgb(59,7,100,1)",
});

const closedMixin = (theme) => ({
  transition: theme.transitions.create("width", {
    easing: theme.transitions.easing.sharp,
    duration: theme.transitions.duration.leavingScreen,
  }),
  overflowX: "hidden",
  width: `calc(${theme.spacing(7)} + 1px)`,
  [theme.breakpoints.up("sm")]: {
    width: `calc(${theme.spacing(8)} + 1px)`,
  },
  backgroundColor: "rgb(59,7,100,1)",
});

const DrawerHeader = styled("div")(({ theme }) => ({
  display: "flex",
  alignItems: "center",
  justifyContent: "flex-end",
  padding: theme.spacing(0, 1),
  // necessary for content to be below app bar
  ...theme.mixins.toolbar,
}));

const AppBar = styled(MuiAppBar, {
  shouldForwardProp: (prop) => prop !== "open",
})(({ theme, open }) => ({
  zIndex: theme.zIndex.drawer + 1,
  width: `calc(100% - ${drawerWidth / 4 + 5}px)`,
  transition: theme.transitions.create(["width", "margin"], {
    easing: theme.transitions.easing.sharp,
    duration: theme.transitions.duration.leavingScreen,
  }),
  ...(open && {
    marginLeft: drawerWidth,
    width: `calc(100% - ${drawerWidth}px)`,
    transition: theme.transitions.create(["width", "margin"], {
      easing: theme.transitions.easing.sharp,
      duration: theme.transitions.duration.enteringScreen,
    }),
  }),
}));

const Drawer = styled(MuiDrawer, {
  shouldForwardProp: (prop) => prop !== "open",
})(({ theme, open }) => ({
  width: drawerWidth,
  flexShrink: 0,
  whiteSpace: "nowrap",
  boxSizing: "border-box",
  ...(open && {
    ...openedMixin(theme),
    "& .MuiDrawer-paper": openedMixin(theme),
  }),
  ...(!open && {
    ...closedMixin(theme),
    "& .MuiDrawer-paper": closedMixin(theme),
  }),
}));

const inter = Inter({ subsets: ["latin"] });

export const metadata = {
  title: "Create Next App",
  description: "Generated by create next app",
};

const useHover = () => {
  const ref = React.useRef();
  const _ref = React.useRef();
  const [hovered, setHovered] = React.useState(false);
  const enter = () => setHovered(true);
  const leave = () => setHovered(false);

  React.useEffect(() => {
    if (ref.current) {
      _ref.current = ref.current;
      _ref.current.addEventListener("mouseenter", enter);
      _ref.current.addEventListener("mouseleave", leave);
    }

    return () => {
      if (_ref.current) {
        _ref.current.removeEventLisener("mouseenter", enter);
        _ref.current.removeEventLisener("mouseleave", leave);
      }
    };
  }, []);

  return [ref, hovered];
};

export default function MainLayout({ children }) {
  const router = usePathname();
  const { logout } = useAuth0();
  const theme = useTheme();
  const [ref, hovered] = useHover();
  const [open, setOpen] = React.useState(false);
  const [SelectMenu, setSelectMenu] = React.useState(0);

  React.useEffect(() => {
    if (hovered) {
      handleDrawerOpen();
    } else {
      handleDrawerClose();
    }
  }, [hovered]);

  const handleDrawerOpen = () => {
    setOpen(true);
  };

  const handleDrawerClose = () => {
    setOpen(false);
  };

  return (
    <>
      <Box sx={{ display: "flex" }}>
        <CssBaseline />
        {/* <AppBar position="fixed" open={open}>
        <Toolbar>
          <Typography variant="h6" noWrap component="div">
            Mini variant drawer
          </Typography>
        </Toolbar>
      </AppBar> */}
        <Drawer
          variant="permanent"
          ref={ref}
          open={open}
          sx={{ display: router === "/" && "none" }}
        >
          <DrawerHeader className="flex justify-center bg-white">
            <IconButton
              disableRipple={true}
              onClick={!open ? handleDrawerOpen : handleDrawerClose}
            >
              {!open ? (
                <Image src={DET} alt="det" width={40} height={50} />
              ) : (
                <Image src={DETFull} alt="det" width={150} height={150} />
              )}
            </IconButton>
          </DrawerHeader>
          <Divider />
          <List className="bg-blue-950 ListHover flex-1">
            {[
              { Icon: InventoryIcon, text: "Projects" },
              { Icon: CalendarMonthIcon, text: "Schedules" },
              { Icon: BentoIcon, text: "Facets" },
              { Icon: CableIcon, text: "Connectors" },
              { Icon: ShoppingCartIcon, text: "MarketPlace" },
              { Icon: "", text: false},
              { Icon: ChatIcon, text: "Chat" },
              { Icon: AspectRatioIcon, text: "ScreenShot" },
            ].map(({Icon,text}, index) =>
            text ? (
                <ListItem
                  key={text}
                  className={ "px-2 py-1 transition-all"}
                  disablePadding
                  sx={{ display: "block" }}
                >
                  <ListItemButton
                    onClick={() => setSelectMenu(index)}
                    className={
                      index == SelectMenu
                        ? "bg-purple-600  rounded-md"
                        : "hover:bg-purple-600 hover:rounded-md transition-all"
                    }
                    sx={{
                      minHeight: 48,
                      justifyContent: open ? "initial" : "center",
                      px: 2.5,
                    }}
                  >
                    <ListItemIcon
                      sx={{
                        minWidth: 0,
                        mr: open ? 3 : "auto",
                        justifyContent: "center",
                      }}
                    >
                      {/* {index % 2 === 0 ? (
                        <InboxIcon className={"text-white"} />
                      ) : ( 
                       )}*/}
                        <Icon className={"text-white"} />
                    </ListItemIcon>
                    <ListItemText
                      className={"text-white"}
                      primary={text}
                      sx={{ opacity: open ? 1 : 0 }}
                    />
                  </ListItemButton>
                </ListItem>
              ) : (
                <Divider className="my-5 mx-5 bg-white" />
              )
            )}
          </List>
          {/* <Divider /> */}
          <Box className="bg-blue-950">
            <List>
              <ListItem
                key="Logout"
                // className="p-2"
                disablePadding
                sx={{ display: "block" }}
              >
                <ListItemButton
                  // className={"bg-green-300 rounded-md"}
                  sx={{
                    minHeight: 48,
                    justifyContent: open ? "initial" : "center",
                    px: 0.5,
                  }}
                >
                  <ListItemIcon
                    sx={{
                      minWidth: 0,
                      mr: open ? 3 : "auto",
                      justifyContent: "center",
                    }}
                  >
                    <Avatar
                      className="ml-2"
                      src="https://as2.ftcdn.net/v2/jpg/05/06/49/35/1000_F_506493511_w887Hp0jyZSIVEgDdM0EUJr2WEu0JYIg.jpg"
                    />
                  </ListItemIcon>
                  <ListItemText
                    primary="James Smith"
                    className={"text-white"}
                    sx={{ opacity: open ? 1 : 0 }}
                  />
                </ListItemButton>
              </ListItem>
              <ListItem
                key="Logout"
                className="p-2"
                disablePadding
                sx={{ display: "block" }}
              >
                <ListItemButton
                  onClick={() =>
                    logout({
                      logoutParams: { returnTo: "http://localhost:3000/" },
                    })
                  }
                  className={"bg-green-300 rounded-md"}
                  sx={{
                    minHeight: 48,
                    justifyContent: open ? "initial" : "center",
                    px: 2.5,
                  }}
                >
                  <ListItemIcon
                    sx={{
                      minWidth: 0,
                      mr: open ? 3 : "auto",
                      justifyContent: "center",
                    }}
                  >
                    <LogoutIcon className={"text-black"} />
                  </ListItemIcon>
                  <ListItemText
                    primary="Logout"
                    className={"text-black"}
                    sx={{ opacity: open ? 1 : 0 }}
                  />
                </ListItemButton>
              </ListItem>
            </List>
          </Box>
        </Drawer>
        <Box component="main" sx={{ flexGrow: 1 }}>
          {children}
        </Box>
      </Box>
    </>
  );
}
